{"version":3,"sources":["../src/utils.js"],"names":["module","exports","validateToken","req","res","next","authorizationHeader","headers","authorization","result","token","split","options","expiresIn","issuer","jwt","verify","config","secret","decoded","err","Error","error","status","send"],"mappings":";;AAAA;;;;AACA;;;;;;AAEAA,OAAOC,OAAP,GAAiB;AACbC,mBAAe,uBAACC,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AAC/B,YAAMC,sBAAsBH,IAAII,OAAJ,CAAYC,aAAxC;AACA,YAAIC,eAAJ;AACA,YAAGH,mBAAH,EAAwB;AACpB,gBAAMI,QAAQP,IAAII,OAAJ,CAAYC,aAAZ,CAA0BG,KAA1B,CAAgC,GAAhC,EAAqC,CAArC,CAAd;AACA,gBAAMC,UAAU;AACZC,2BAAW,IADC;AAEZC,wBAAQ;AAFI,aAAhB;;AAKA,gBAAI;AACA;AACAL,yBAASM,uBAAIC,MAAJ,CAAWN,KAAX,EAAkBO,iBAAOC,MAAzB,EAAiCN,OAAjC,CAAT;;AAEA;AACAT,oBAAIgB,OAAJ,GAAcV,MAAd;;AAEA;AACAJ;AAEH,aAVD,CAUE,OAAOe,GAAP,EAAW;AACT;AACA,sBAAM,IAAIC,KAAJ,CAAUD,GAAV,CAAN;AACH;AACJ,SArBD,MAqBO;AACHX,qBAAS;AACLa,8DADK;AAELC,wBAAQ;AAFH,aAAT;AAIAnB,gBAAImB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBf,MAArB;AACH;AACJ;AAhCY,CAAjB","file":"utils.js","sourcesContent":["import jwt from 'jsonwebtoken';\nimport config from './config';\n\nmodule.exports = {\n    validateToken: (req, res, next) => {\n        const authorizationHeader = req.headers.authorization;\n        let result;\n        if(authorizationHeader) {\n            const token = req.headers.authorization.split(' ')[1];\n            const options = {\n                expiresIn: '1d',\n                issuer: 'http://relicinnova.com.ng'\n            };\n\n            try {\n                // verifying to make sure that the token hasnt expired and has been issued by us\n                result = jwt.verify(token, config.secret, options); \n\n                // passing the decoded token to the request object\n                req.decoded = result;\n                \n                // calling next to pass execution to subsequent middleware \n                next();\n\n            } catch (err){\n                // throwing an error object just in case anything goes wrong \n                throw new Error(err)\n            }\n        } else {\n            result = {\n                error: `Authentication error. Token required.`,\n                status: 401\n            };\n            res.status(401).send(result);\n        }\n    }\n}"]}
{"version":3,"sources":["../../../src/controller/booking/booking.request.js"],"names":["config","db","api","post","req","res","result","body","clientID","clientName","clientPhone","clientEmail","extraTasks","hours","moreHours","priority","accessType","keyHiddenPin","keySafePin","frequency","dateFirstClean","postcode","address","city","selectedCleaner0","selectedCleaner1","selectedCleaner2","selectedCleanerID0","selectedCleanerID1","selectedCleanerID2","selectedCleaners","selectedCleanerIDs","status","json","checkBody","notEmpty","errors","validationErrors","error","send","newRequest","save","err","message","get","Client","findOne","params","client","ClientDetails","details","CleanerDetails","find","cleanerDetails","errMsg"],"mappings":"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","file":"booking.request.js","sourcesContent":["import { Router } from 'express';\nimport mongoose from 'mongoose';\n\nimport Booking from '../../model/booking/booking.requests';\nimport Client from '../../model/client/client';\nimport ClientDetails from '../../model/client/client.details';\nimport Cleaner from '../../model/cleaner/cleaner';\nimport CleanerDetails from '../../model/cleaner/cleaner.details';\n\nexport default ({config, db}) => {\n    let api = Router();\n\n    // '/api/v1/booking/request'\n    api.post('/request', (req, res)=>{\n        let result = {};\n\n        const { clientID, clientName, clientPhone, clientEmail, extraTasks, hours, moreHours, priority, accessType, keyHiddenPin, keySafePin, frequency, dateFirstClean, postcode, address, city } = req.body;\n        const selectedCleaner0 = req.body.selectedCleaner0;\n        const selectedCleaner1 = req.body.selectedCleaner1;\n        const selectedCleaner2 = req.body.selectedCleaner2;\n        const selectedCleanerID0 = req.body.selectedCleanerID1;\n        const selectedCleanerID1 = req.body.selectedCleanerID1;\n        const selectedCleanerID2 = req.body.selectedCleanerID2;\n        const selectedCleaners = [selectedCleaner0, selectedCleaner1, selectedCleaner2];\n        const selectedCleanerIDs = [selectedCleanerID0, selectedCleanerID1, selectedCleanerID2];\n        const status = false;\n\n        res.json({'clientID': clientID},{'SelectedCleaners': selectedCleaners},{'selectedCleanerIDs': selectedCleanerIDs});\n\n        req.checkBody('clientID', 'clientID is required').notEmpty();\n        req.checkBody('clientName', 'clientName is required').notEmpty();\n        req.checkBody('clientPhone', 'clientPhone is required').notEmpty();\n        req.checkBody('clientEmail', 'clientEmail is required').notEmpty();\n        req.checkBody('extraTasks', 'extraTasks is required').notEmpty();\n        req.checkBody('hours', 'Cleaning hours is required').notEmpty();\n        req.checkBody('accessType', 'Apartment access type is required').notEmpty();\n        req.checkBody('frequency', 'Cleaning frequency is required').notEmpty();\n        req.checkBody('dateFirstClean', 'Date of First Clean is required').notEmpty();\n        req.checkBody('postcode', 'Postcode is required').notEmpty();\n        req.checkBody('address', 'address is required').notEmpty();\n        req.checkBody('city', 'City is required').notEmpty();\n\n        let errors  = req.validationErrors();\n        if(errors) {\n            let result = {};\n            let status = 400;\n            result.status = status;\n            result.error = errors;\n            res.status(status).send(result);\n        } else {\n            let newRequest = Booking({\n                clientID : clientID,\n                clientName: clientName,\n                clientEmail: clientEmail,\n                clientPhone: clientPhone,\n                extraTasks: extraTasks,\n                hours: hours,\n                moreHours: moreHours,\n                address: address,\n                city: city,\n                postcode: postcode,\n                keySafePin: keySafePin,\n                keyHiddenPin: keyHiddenPin,\n                frequency: frequency,\n                priority: priority,\n                accessType: accessType,\n                dateFirstClean: dateFirstClean,\n                selectedCleaners: selectedCleaners,\n                selectedCleanerIDs: selectedCleanerIDs,\n                status: status\n            });\n\n            newRequest.save(err=>{\n                if (err) {\n                    let status = 400;\n                    result.status = status;\n                    result.error = err;\n                    res.status(status).send(result);\n                }\n\n                let status = 201;\n                result.status = status;\n                let message = 'Request is submitted';\n                result.message = message;\n                res.status(status).send(result);\n            });\n        }\n    });\n\n    // 'api/v1/booking/final/:clientID'\n    api.get('/final/:clientID', (req, res) => {\n        Client.findOne(({clientID: req.params.clientID}), (err, client) =>{\n            ClientDetails.findOne(({clientID: req.params.clientID}), (error, details) =>{\n                CleanerDetails.find(({city: details.city}), (err, cleanerDetails) => {\n                    if(!(cleanerDetails)){\n                        let result = {};\n                        let status = 400;\n                        let errMsg = 'Cleaner Details Empty';\n                        result.status = status;\n                        result.errMsg = errMsg;\n                        res.status(status).send(result);\n\n                        // render the booking final page\n                    }  \n                    let result = {};\n                    let status = 200;\n                    let message = 'Cleaner Details Submited';\n                    result.status = status;\n                    result.message = message;\n                    res.status(status).send(result);\n                })\n            })\n        })\n    });\n\n    return api;\n}\n"]}
{"version":3,"sources":["../../../src/controller/cleaner/cleaner.account.js"],"names":["config","db","api","post","req","res","storage","multer","diskStorage","destination","filename","file","cb","fieldname","Date","now","path","extname","originalname","checkFileType","files","fileTypes","test","toLocaleLowerCase","mimeType","upload","limits","fileSize","fileFilter","fields","name","err","result","status","error","send","console","log","body","email","password","password2","postcode","extraTasks","experience","profile","fullName","mobileNumber","address","city","income","cleanerId","bcrypt","hashSync","profilePic","nationalId","healthInsurance","checkBody","notEmpty","isEmail","equals","errors","validationErrors","newUser","Cleaner","newCleanerDetails","CleanerDetails","createUser","user","message","save","json","findOne","compare","then","match","payload","_id","options","expiresIn","issuer","secret","token","jwt","sign","catch","get","logout"],"mappings":"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","file":"cleaner.account.js","sourcesContent":["import mongoose from 'mongoose';\nimport { Router } from 'express';\nimport bodyParser from 'body-parser';\nimport jwt from 'jsonwebtoken';\nimport bcrypt from 'bcryptjs';\nimport multer from 'multer';\nimport path from 'path';\n\n// destructuring the validate token method\nimport { validateToken } from '../../utils';\n\n// importing the models \nimport Cleaner from '../../model/cleaner/cleaner';\nimport CleanerDetails from '../../model/cleaner/cleaner.details';\n\n\nexport default ({config, db}) => {\n    let api = Router();\n\n    // ******************************************\n    // ******* CLEANER AUTHENTICATION ***********\n    // ******************************************\n\n    // '/api/v1/account/cleaner/signup'\n    api.post('/signup',  (req, res)=>{\n        // Setting the  Storage engine\n\n        const storage = multer.diskStorage({\n            destination: './public/uploads/',\n            filename: (req, file, cb) => {\n                cb(null, file.fieldname + '-' + Date.now() + path.extname(file.originalname))\n            }\n        });\n\n        const checkFileType = (files, cb) => {\n            \n            // allowed file extensions\n            const fileTypes = /jpeg|jpg|png|gif|pdf/;\n            \n            // checking file extensions \n            const extname = fileTypes.test(path.extname(files.originalname).toLocaleLowerCase());\n\n            // checking mime \n            const mimeType = fileTypes.test(files.mimeType);\n\n            if(mimeType && extname) {\n                return cb(null, true);\n            } else {\n                cb('Error: Images and Documents only')\n            }\n        }\n\n        // Initialise Upload\n        const upload = multer({\n            storage: storage,\n            limits: {fileSize: 10000000},\n            fileFilter: (req, file, cb) =>{\n                checkFileType(file, cb);\n            }\n        }).fields([{name: 'profilePic'}, {name: 'nationalId'}, {name: 'healthInsurance'}])\n        \n        // TODO: check if this code is running well because of the (err) part\n        upload(req, res, (err)=>{\n            if (err) {\n                let result = {};\n                let status = 400;\n                result.status = status;\n                result.error = err;\n                res.status(status).send(result);\n                console.log(err);\n                \n            } else {\n                const {email, password, password2, postcode, extraTasks, experience, profile, fullName, mobileNumber, address, city, income } = req.body;\n                const cleanerId = bcrypt.hashSync('fullName', 10);\n                const profilePic = req.files['profilePic'][0].filename;\n                const nationalId = req.files['nationalId'][0].filename;\n                const healthInsurance = req.files['healthInsurance'][0].filename;\n\n                req.checkBody('email', 'Email is required').notEmpty();\n                req.checkBody('email', 'Email is not valid').isEmail();\n                req.checkBody('password', 'Password is required').notEmpty();\n                req.checkBody('password2', 'Passwords do not match').equals(req.body.password);\n                req.checkBody('postcode', 'Postcode is required').notEmpty();\n                req.checkBody('fullName', 'Full Name is required').notEmpty();\n                req.checkBody('mobileNumber', 'Mobile Number is required').notEmpty();\n                req.checkBody('address', 'Address is required').notEmpty();\n                req.checkBody('city', 'City is required').notEmpty();\n                req.checkBody('income', 'Your desired income is required').notEmpty();\n                req.checkBody('experience', 'Your years of experience is required').notEmpty();\n                req.checkBody('profile', 'Your profile is required').notEmpty();\n\n                let errors = req.validationErrors();\n                let status = 200;\n                let result = {};\n\n                if (errors) {\n                    status = 400;\n                    result.error  = errors;\n                    result.status = status;\n                    res.status(status).send(result);\n                } else {\n                    let newUser =  new Cleaner({\n                        email: email,\n                        cleanerId: cleanerId,\n                        password: password\n                    });\n\n                    let newCleanerDetails = new CleanerDetails ({\n                        postcode: postcode,\n                        mobileNumber: mobileNumber,\n                        extraTasks: extraTasks,\n                        experience: experience,\n                        profile: profile,\n                        profilePic: profilePic,\n                        nationalId: nationalId,\n                        healthInsurance: healthInsurance,\n                        address: address,\n                        fullName: fullName,\n                        city: city,\n                        income: income,\n                        cleanerId: cleanerId\n                    });\n\n                    Cleaner.createUser(newUser, (err, user)=>{\n                        // let result = {};\n                        // let status = 200;\n                        if (err) {\n                            status = 400;\n                            result.status = status;\n                            result.error = err;\n                            res.status(status).send(result);\n                        }\n                        result.status = status;\n                        result.message = 'Successfullt created a new Cleaner Account';\n                        res.status(status).send(result);\n                    });\n\n                    newCleanerDetails.save( err =>{\n                        if (err) {\n                            status = 400;\n                            result.status = status;\n                            result.error = err;\n                            res.send(status).send(result)\n                        }\n\n                    });\n                }\n                res.json({'message': 'Upload Successfull'})\n            }\n        })\n    });\n\n\n    // '/api/v1/cleaner/account/login'        \n    api.post('/login', (req, res)=>{\n        let result  = {};\n        let status  = 200;\n\n        const {email, password}  = req.body;\n        Cleaner.findOne({email}, (err, user)=>{\n            if(!err && user) {\n                // if there is no error and a user is found \n                bcrypt.compare(password, user.password).then(match => {\n                    if (match) {\n                        status = 200;\n\n                        // creating the user token\n                        // const payload = { user: user.name};\n                        const payload = { _id:  user._id}\n\n                        const options = {expiresIn: '1d', issuer: 'http://relicinnova.com.ng'};\n                        const secret = config.secret;\n                        const token = jwt.sign(payload, secret, options);\n\n                        // printing the token \n                        result.token = token;\n                        result.user = user;\n                        result.status = status;\n\n                        res.status(status).send(result);\n                    } else {\n                        status = 400;\n                        result = error = 'Authentication error';\n                        res.status(status).send(result);\n                    }\n                }).catch( err=> {\n                    status = 500;\n                    result.status = status;\n                    result.error = err;\n                    res.status(status).send(result);\n                });\n            } else {\n                status = 400;\n                message = 'Incorrect email or password';\n                result.status = status;\n                result.error = err;\n                result.message = message;\n                res.status(status).send(result);\n            }\n        })\n    });\n\n    \n    // '/api/v1/account/cleaner/logout'\n    api.get('/logout', (req, res)=>{\n        req.logout();\n        let result = {};\n        let status = 201;\n        result.status = status;\n        result.message = 'Successfully logged out';\n        res.status(status).send(result);\n    });\n\n\n    return api;\n}\n"]}
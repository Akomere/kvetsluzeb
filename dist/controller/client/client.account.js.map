{"version":3,"sources":["../../../src/controller/client/client.account.js"],"names":["config","db","api","get","req","res","body","username","email","password","password2","postcode","bedrooms","bathrooms","extraTasks","hours","moreHours","priority","accessType","keySafePin","keyHiddenPin","schedule","dateOfFirstClean","fullName","mobileNumber","address","city","clientID","bcrypt","hashSync","checkBody","notEmpty","isEmail","equals","isNumeric","errors","validationErrors","status","result","error","send","newClient","Client","newClientDetails","ClientDetails","cleaningHours","moreCleaningHours","cleaningPriority","apartmentAccessType","cleaningFrequency","createUser","err","user","message","save","post","findOne","compare","then","match","payload","_id","options","expiresIn","issuer","secret","token","jwt","sign","catch","logout"],"mappings":"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","file":"client.account.js","sourcesContent":["import { Router } from 'express';\nimport bcrypt from 'bcryptjs';\nimport mongoose from 'mongoose';\n\n\n\nimport Client from '../../model/client/client';\nimport ClientDetails from '../../model/client/client.details';\n\nimport Cleaner from '../../model/cleaner/cleaner';\nimport CleanerDetails from '../../model/cleaner/cleaner.details';\n\nexport default ({config, db}) => {\n    let api = Router();\n\n    // **************************************************************\n    // ******* CLIENT AUTHENTICATION COUPLED WITH BOOKING ***********\n    // **************************************************************\n\n    // /api/v1/clent/account/signup -- Booking and signup process\n    api.get('/signup', (req, res)=>{\n        const { username, email, password, password2 } = req.body;\n        const { postcode, bedrooms, bathrooms, extraTasks, hours, moreHours, priority, accessType, keySafePin, keyHiddenPin, schedule, dateOfFirstClean, fullName, mobileNumber, address, city } = req.body;\n\n        let clientID = bcrypt.hashSync('fullName', 10);\n\n        req.checkBody('email', 'Email is required').notEmpty();\n        req.checkBody('email', 'Email is not valid').isEmail();\n        req.checkBody('username', 'Username is required').notEmpty();\n        req.checkBody('password', 'Password is required').notEmpty();\n        req.checkBody('password2', 'Passwords do not match').equals(req.body.password);\n\n        req.checkBody('postcode', 'Postcode is required').notEmpty();\n        req.checkBody('bedrooms', 'Number of Bedrooms is required').notEmpty();\n        req.checkBody('bedrooms', 'Bedroom field must be a number').isNumeric();\n        req.checkBody('bathrooms', 'Number of Bathrooms is required').notEmpty();\n        req.checkBody('bathrooms', 'Bathroom field must be a number').isNumeric();\n        req.checkBody('hours', 'Hours for cleaning is required').notEmpty();\n        req.checkBody('hours', 'Hours field must be a number').isNumeric();\n        if(moreHours === 'more'){\n            req.checkBody('moreHours', 'Extend cleaning hours is required').notEmpty();\n        }\n        req.checkBody('accessType', 'Access Type field is required').notEmpty();\n        if (accessType === 'keySafe') {\n            req.checkBody('keySafePin', 'keySafePin field is required').notEmpty();\n        }\n        if (accessType === 'keyHidden') {\n            req.checkBody('KeyHiddenPin', 'KeyHiddenPin field is required').notEmpty();\n        }\n\n        req.checkBody('schedule', 'Schedule field is required').notEmpty();\n        req.checkBody('fullName', 'FullName field is required').notEmpty();\n        req.checkBody('mobileNumber', 'Mobile Number field is required').notEmpty();\n        req.checkBody('address', 'Addresss field is required').notEmpty();\n        req.checkBody('city', 'City field is required').notEmpty();\n\n        let errors = req.validationErrors();\n\n        if(errors) {\n            let status = 400;\n            let result = {};\n            let error = errors;\n            result.status = status;\n            result.error = error;\n            res.status(status).send(result);\n        } else {\n            let newClient = new Client({\n                email: email,\n                username: username,\n                password: password,\n                clientID: clientID\n            });\n            let newClientDetails = new ClientDetails({\n                postcode: postcode,\n                bedrooms: bedrooms,\n                bathrooms: bathrooms,\n                extraTasks: extraTasks,\n                dateOfFirstClean: dateOfFirstClean,\n                cleaningHours: hours,\n                moreCleaningHours: moreHours,\n                cleaningPriority: priority,\n                apartmentAccessType: accessType,\n                keyHiddenPin: keyHiddenPin,\n                keySafePin: keySafePin,\n                cleaningFrequency: schedule,\n                mobileNumber: mobileNumber,\n                address: address,\n                fullName: fullName,\n                city: city,\n                clientID: clientID\n            });\n\n            Client.createUser(newClient, (err, user)=>{\n                // let result = {};\n                // let status = 200;\n                if (err) {\n                    status = 400;\n                    result.status = status;\n                    result.error = err;\n                    res.status(status).send(result);\n                }\n                result.status = status;\n                result.message = 'Successfullt created a new Client Account';\n                res.status(status).send(result);\n            });\n\n            newClientDetails.save(err=>{\n                if (err) {\n                    let result = {};\n                    let status = 400;\n                    let error = err;\n                    result.status = status;\n                    result.error = error;\n                    res.status(status).send(result)\n                } \n                let result = {};\n                let status = 201;\n                let message = 'Done adding details';\n                result.status = status;\n                result.message = message;\n                res.status(status).send(result);\n        })\n        }\n    });\n\n    // '/api/v1/client/account/login'    \n    api.post('/login', (req, res)=>{\n        let result  = {};\n        let status  = 200;\n\n        const {email, password}  = req.body;\n        Client.findOne({email}, (err, user)=>{\n            if(!err && user) {\n                // if there is no error and a user is found \n                bcrypt.compare(password, user.password).then(match => {\n                    if (match) {\n                        status = 200;\n\n                        // creating the user token\n                        // const payload = { user: user.name};\n                        const payload = { _id:  user._id}\n\n                        const options = {expiresIn: '1d', issuer: 'http://relicinnova.com.ng'};\n                        const secret = config.secret;\n                        const token = jwt.sign(payload, secret, options);\n\n                        // printing the token \n                        result.token = token;\n                        result.user = user;\n                        result.status = status;\n\n                        res.status(status).send(result);\n                    } else {\n                        status = 400;\n                        result = error = 'Authentication error';\n                        res.status(status).send(result);\n                    }\n                }).catch( err=> {\n                    status = 500;\n                    result.status = status;\n                    result.error = err;\n                    res.status(status).send(result);\n                });\n            } else {\n                status = 400;\n                message = 'Incorrect email or password';\n                result.status = status;\n                result.error = err;\n                result.message = message;\n                res.status(status).send(result);\n            }\n        })\n    });\n\n    // '/api/v1/client/account/logout'    \n    api.get('/logout', (req, res)=>{\n        req.logout();\n        let result = {};\n        let status = 201;\n        let message = 'Successfully Logged out';\n        result.status = status;\n        result.message = message;\n        res.status(status).send(result);\n    });\n\n    \n\n\n    return api;\n}"]}